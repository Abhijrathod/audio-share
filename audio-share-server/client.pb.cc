// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace io {
namespace github {
namespace mkckr0 {
namespace audio_share_app {
namespace pb {
PROTOBUF_CONSTEXPR AudioFormat::AudioFormat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.format_tag_)*/0
  , /*decltype(_impl_.channels_)*/0
  , /*decltype(_impl_.sample_rate_)*/0
  , /*decltype(_impl_.bits_per_sample_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioFormatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioFormatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioFormatDefaultTypeInternal() {}
  union {
    AudioFormat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioFormatDefaultTypeInternal _AudioFormat_default_instance_;
}  // namespace pb
}  // namespace audio_share_app
}  // namespace mkckr0
}  // namespace github
}  // namespace io
static ::_pb::Metadata file_level_metadata_client_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_client_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_client_2eproto = nullptr;

const uint32_t TableStruct_client_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::github::mkckr0::audio_share_app::pb::AudioFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::github::mkckr0::audio_share_app::pb::AudioFormat, _impl_.format_tag_),
  PROTOBUF_FIELD_OFFSET(::io::github::mkckr0::audio_share_app::pb::AudioFormat, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::io::github::mkckr0::audio_share_app::pb::AudioFormat, _impl_.sample_rate_),
  PROTOBUF_FIELD_OFFSET(::io::github::mkckr0::audio_share_app::pb::AudioFormat, _impl_.bits_per_sample_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::io::github::mkckr0::audio_share_app::pb::AudioFormat)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::io::github::mkckr0::audio_share_app::pb::_AudioFormat_default_instance_._instance,
};

const char descriptor_table_protodef_client_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014client.proto\022#io.github.mkckr0.audio_s"
  "hare_app.pb\"a\n\013AudioFormat\022\022\n\nformat_tag"
  "\030\001 \001(\005\022\020\n\010channels\030\002 \001(\005\022\023\n\013sample_rate\030"
  "\003 \001(\005\022\027\n\017bits_per_sample\030\004 \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_client_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_client_2eproto = {
    false, false, 158, descriptor_table_protodef_client_2eproto,
    "client.proto",
    &descriptor_table_client_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_client_2eproto::offsets,
    file_level_metadata_client_2eproto, file_level_enum_descriptors_client_2eproto,
    file_level_service_descriptors_client_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_client_2eproto_getter() {
  return &descriptor_table_client_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_client_2eproto(&descriptor_table_client_2eproto);
namespace io {
namespace github {
namespace mkckr0 {
namespace audio_share_app {
namespace pb {

// ===================================================================

class AudioFormat::_Internal {
 public:
};

AudioFormat::AudioFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.github.mkckr0.audio_share_app.pb.AudioFormat)
}
AudioFormat::AudioFormat(const AudioFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioFormat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.format_tag_){}
    , decltype(_impl_.channels_){}
    , decltype(_impl_.sample_rate_){}
    , decltype(_impl_.bits_per_sample_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.format_tag_, &from._impl_.format_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bits_per_sample_) -
    reinterpret_cast<char*>(&_impl_.format_tag_)) + sizeof(_impl_.bits_per_sample_));
  // @@protoc_insertion_point(copy_constructor:io.github.mkckr0.audio_share_app.pb.AudioFormat)
}

inline void AudioFormat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.format_tag_){0}
    , decltype(_impl_.channels_){0}
    , decltype(_impl_.sample_rate_){0}
    , decltype(_impl_.bits_per_sample_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AudioFormat::~AudioFormat() {
  // @@protoc_insertion_point(destructor:io.github.mkckr0.audio_share_app.pb.AudioFormat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioFormat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:io.github.mkckr0.audio_share_app.pb.AudioFormat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.format_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bits_per_sample_) -
      reinterpret_cast<char*>(&_impl_.format_tag_)) + sizeof(_impl_.bits_per_sample_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioFormat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 format_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.format_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sample_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bits_per_sample = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bits_per_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioFormat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.github.mkckr0.audio_share_app.pb.AudioFormat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 format_tag = 1;
  if (this->_internal_format_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_format_tag(), target);
  }

  // int32 channels = 2;
  if (this->_internal_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channels(), target);
  }

  // int32 sample_rate = 3;
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sample_rate(), target);
  }

  // int32 bits_per_sample = 4;
  if (this->_internal_bits_per_sample() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bits_per_sample(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.github.mkckr0.audio_share_app.pb.AudioFormat)
  return target;
}

size_t AudioFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.github.mkckr0.audio_share_app.pb.AudioFormat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 format_tag = 1;
  if (this->_internal_format_tag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_format_tag());
  }

  // int32 channels = 2;
  if (this->_internal_channels() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channels());
  }

  // int32 sample_rate = 3;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_rate());
  }

  // int32 bits_per_sample = 4;
  if (this->_internal_bits_per_sample() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bits_per_sample());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioFormat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioFormat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioFormat::GetClassData() const { return &_class_data_; }


void AudioFormat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioFormat*>(&to_msg);
  auto& from = static_cast<const AudioFormat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.github.mkckr0.audio_share_app.pb.AudioFormat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_format_tag() != 0) {
    _this->_internal_set_format_tag(from._internal_format_tag());
  }
  if (from._internal_channels() != 0) {
    _this->_internal_set_channels(from._internal_channels());
  }
  if (from._internal_sample_rate() != 0) {
    _this->_internal_set_sample_rate(from._internal_sample_rate());
  }
  if (from._internal_bits_per_sample() != 0) {
    _this->_internal_set_bits_per_sample(from._internal_bits_per_sample());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioFormat::CopyFrom(const AudioFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.github.mkckr0.audio_share_app.pb.AudioFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFormat::IsInitialized() const {
  return true;
}

void AudioFormat::InternalSwap(AudioFormat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioFormat, _impl_.bits_per_sample_)
      + sizeof(AudioFormat::_impl_.bits_per_sample_)
      - PROTOBUF_FIELD_OFFSET(AudioFormat, _impl_.format_tag_)>(
          reinterpret_cast<char*>(&_impl_.format_tag_),
          reinterpret_cast<char*>(&other->_impl_.format_tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioFormat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_2eproto_getter, &descriptor_table_client_2eproto_once,
      file_level_metadata_client_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace audio_share_app
}  // namespace mkckr0
}  // namespace github
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::github::mkckr0::audio_share_app::pb::AudioFormat*
Arena::CreateMaybeMessage< ::io::github::mkckr0::audio_share_app::pb::AudioFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::github::mkckr0::audio_share_app::pb::AudioFormat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
